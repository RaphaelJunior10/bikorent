#!/usr/bin/env node

/**
 * Script de test de la connexion Firebase
 * 
 * Ce script teste la connexion √† Firebase et v√©rifie les permissions
 * avant d'effectuer la migration des donn√©es.
 * 
 * Usage: node scripts/test-firebase.js
 */

const { firestoreUtils, COLLECTIONS } = require('../config/firebase');
const { isFirebaseEnabled, getFirebaseConfig } = require('../config/environment');

async function testFirebaseConnection() {
    console.log('üß™ Test de la connexion Firebase...\n');

    try {
        // 1. V√©rifier la configuration
        console.log('1Ô∏è‚É£ V√©rification de la configuration...');
        const config = getFirebaseConfig();
        
        const requiredFields = ['apiKey', 'authDomain', 'projectId', 'storageBucket', 'messagingSenderId', 'appId'];
        let configValid = true;
        
        for (const field of requiredFields) {
            if (!config[field] || config[field].includes('XXXXX')) {
                console.log(`   ‚ùå Configuration manquante pour: ${field}`);
                configValid = false;
            } else {
                console.log(`   ‚úÖ ${field}: ${field === 'apiKey' ? '***' + config[field].slice(-4) : config[field]}`);
            }
        }
        
        if (!configValid) {
            console.log('\n‚ö†Ô∏è  Configuration Firebase incompl√®te. Veuillez configurer vos variables d\'environnement.');
            return false;
        }
        
        console.log('   ‚úÖ Configuration Firebase valide\n');

        // 2. V√©rifier que Firebase est activ√©
        console.log('2Ô∏è‚É£ V√©rification de l\'activation Firebase...');
        if (!isFirebaseEnabled()) {
            console.log('   ‚ùå Firebase n\'est pas activ√©');
            return false;
        }
        console.log('   ‚úÖ Firebase est activ√©\n');

        // 3. Test de connexion √† Firestore
        console.log('3Ô∏è‚É£ Test de connexion √† Firestore...');
        try {
            // Essayer de r√©cup√©rer les collections existantes
            const collections = Object.values(COLLECTIONS);
            console.log(`   üìã Collections configur√©es: ${collections.join(', ')}`);
            
            // Tester une requ√™te simple sur chaque collection
            for (const collectionName of collections) {
                try {
                    const documents = await firestoreUtils.getAll(collectionName);
                    console.log(`   ‚úÖ Collection "${collectionName}": ${documents.length} documents`);
                } catch (error) {
                    console.log(`   ‚ö†Ô∏è  Collection "${collectionName}": ${error.message}`);
                }
            }
            
        } catch (error) {
            console.log(`   ‚ùå Erreur de connexion √† Firestore: ${error.message}`);
            return false;
        }
        
        console.log('   ‚úÖ Connexion √† Firestore r√©ussie\n');

        // 4. Test d'√©criture (cr√©er un document de test)
        console.log('4Ô∏è‚É£ Test d\'√©criture...');
        try {
            const testData = {
                test: true,
                timestamp: new Date(),
                message: 'Test de connexion Firebase'
            };
            
            const result = await firestoreUtils.add('test', testData);
            console.log(`   ‚úÖ Document de test cr√©√© (ID: ${result.id})`);
            
            // Supprimer le document de test
            await firestoreUtils.delete('test', result.id);
            console.log('   ‚úÖ Document de test supprim√©');
            
        } catch (error) {
            console.log(`   ‚ùå Erreur d'√©criture: ${error.message}`);
            return false;
        }
        
        console.log('   ‚úÖ Permissions d\'√©criture OK\n');

        // 5. Test des r√®gles de s√©curit√©
        console.log('5Ô∏è‚É£ V√©rification des r√®gles de s√©curit√©...');
        console.log('   ‚ÑπÔ∏è  Mode test activ√© - toutes les op√©rations sont autoris√©es');
        console.log('   ‚ö†Ô∏è  Pour la production, configurez des r√®gles de s√©curit√© plus strictes');
        console.log('   ‚úÖ R√®gles de s√©curit√© OK (mode d√©veloppement)\n');

        console.log('üéâ Tous les tests Firebase sont pass√©s avec succ√®s !');
        console.log('\nüìã R√©sum√©:');
        console.log('   ‚úÖ Configuration Firebase valide');
        console.log('   ‚úÖ Firebase activ√©');
        console.log('   ‚úÖ Connexion √† Firestore OK');
        console.log('   ‚úÖ Permissions d\'√©criture OK');
        console.log('   ‚úÖ R√®gles de s√©curit√© OK');
        
        return true;

    } catch (error) {
        console.error('‚ùå Erreur lors du test Firebase:', error);
        return false;
    }
}

// Fonction pour afficher les informations de configuration
function showConfigurationInfo() {
    console.log('üìã Informations de configuration Firebase:');
    console.log('   - Assurez-vous d\'avoir cr√©√© un projet Firebase');
    console.log('   - Activez Firestore Database en mode test');
    console.log('   - Configurez vos variables d\'environnement dans un fichier .env');
    console.log('   - V√©rifiez que les r√®gles de s√©curit√© permettent la lecture/√©criture');
    console.log('');
}

// Ex√©cution du script
async function main() {
    console.log('üî• Test de la configuration Firebase pour BikoRent\n');
    
    const success = await testFirebaseConnection();
    
    if (!success) {
        console.log('\n‚ùå Les tests Firebase ont √©chou√©.');
        console.log('Veuillez v√©rifier votre configuration avant de proc√©der √† la migration.\n');
        showConfigurationInfo();
        process.exit(1);
    }
    
    console.log('\nüöÄ Vous pouvez maintenant proc√©der √† la migration avec:');
    console.log('   node scripts/migrate-to-firebase.js');
    console.log('');
    console.log('üí° Options disponibles:');
    console.log('   --clear ou -c : Vider les collections avant la migration');
    console.log('');
}

// Gestion des erreurs
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
    process.exit(1);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Exception non captur√©e:', error);
    process.exit(1);
});

// Lancer le script
main(); 