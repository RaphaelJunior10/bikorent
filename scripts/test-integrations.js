#!/usr/bin/env node

/**
 * Script de test pour les int√©grations
 * Teste les routes d'int√©gration dans la page param√®tres
 */

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testIntegrations() {
    console.log('üß™ Test des routes d\'int√©gration...\n');

    try {
        // Test 1: R√©cup√©rer l'√©tat des int√©grations
        console.log('1Ô∏è‚É£ Test de r√©cup√©ration de l\'√©tat des int√©grations...');
        const getResponse = await fetch(`${BASE_URL}/parametres/integrations`);
        const getData = await getResponse.json();
        
        if (getData.success) {
            console.log('‚úÖ R√©cup√©ration r√©ussie:', getData.data);
        } else {
            console.log('‚ùå √âchec de la r√©cup√©ration:', getData.message);
        }

        // Test 2: Connecter une int√©gration
        console.log('\n2Ô∏è‚É£ Test de connexion d\'une int√©gration (Google Calendar)...');
        const connectResponse = await fetch(`${BASE_URL}/parametres/integrations/google-calendar/toggle`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ action: 'connect' })
        });
        const connectData = await connectResponse.json();
        
        if (connectData.success) {
            console.log('‚úÖ Connexion r√©ussie:', connectData.data);
        } else {
            console.log('‚ùå √âchec de la connexion:', connectData.message);
        }

        // Test 3: D√©connecter une int√©gration
        console.log('\n3Ô∏è‚É£ Test de d√©connexion d\'une int√©gration (Google Calendar)...');
        const disconnectResponse = await fetch(`${BASE_URL}/parametres/integrations/google-calendar/toggle`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ action: 'disconnect' })
        });
        const disconnectData = await disconnectResponse.json();
        
        if (disconnectData.success) {
            console.log('‚úÖ D√©connexion r√©ussie:', disconnectData.data);
        } else {
            console.log('‚ùå √âchec de la d√©connexion:', disconnectData.message);
        }

        // Test 4: V√©rifier l'√©tat final
        console.log('\n4Ô∏è‚É£ V√©rification de l\'√©tat final...');
        const finalResponse = await fetch(`${BASE_URL}/parametres/integrations`);
        const finalData = await finalResponse.json();
        
        if (finalData.success) {
            console.log('‚úÖ √âtat final:', finalData.data);
        } else {
            console.log('‚ùå √âchec de la v√©rification finale:', finalData.message);
        }

        // Test 5: Test avec une action invalide
        console.log('\n5Ô∏è‚É£ Test avec une action invalide...');
        const invalidResponse = await fetch(`${BASE_URL}/parametres/integrations/whatsapp/toggle`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ action: 'invalid-action' })
        });
        const invalidData = await invalidResponse.json();
        
        if (!invalidData.success) {
            console.log('‚úÖ Validation correcte - action invalide rejet√©e:', invalidData.message);
        } else {
            console.log('‚ùå Probl√®me de validation - action invalide accept√©e');
        }

        console.log('\nüéâ Tests termin√©s !');

    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error.message);
        console.log('\nüí° Assurez-vous que le serveur est d√©marr√© sur le port 3000');
    }
}

// Ex√©cuter les tests
if (require.main === module) {
    testIntegrations();
}

module.exports = { testIntegrations };
