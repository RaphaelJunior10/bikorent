#!/usr/bin/env node

/**
 * Script de test pour les routes de m√©thodes de paiement
 * Teste les routes de gestion des m√©thodes de paiement
 */

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testPaymentMethodsRoutes() {
    console.log('üß™ Test des routes de m√©thodes de paiement...\n');

    try {
        // Test 1: R√©cup√©rer les types de m√©thodes de paiement
        console.log('1Ô∏è‚É£ Test de r√©cup√©ration des types de m√©thodes de paiement...');
        const typesResponse = await fetch(`${BASE_URL}/parametres/payment-methods/types`);
        const typesData = await typesResponse.json();
        
        if (typesData.success) {
            console.log('‚úÖ Types de m√©thodes de paiement r√©cup√©r√©s avec succ√®s:');
            typesData.data.types.forEach(type => {
                console.log(`   - ${type.name} (${type.id}): ${type.parameters.length} param√®tre(s)`);
            });
        } else {
            console.log('‚ùå √âchec de la r√©cup√©ration des types:', typesData.message);
        }

        // Test 2: R√©cup√©rer les m√©thodes de paiement de l'utilisateur
        console.log('\n2Ô∏è‚É£ Test de r√©cup√©ration des m√©thodes de paiement de l\'utilisateur...');
        const methodsResponse = await fetch(`${BASE_URL}/parametres/payment-methods`);
        const methodsData = await methodsResponse.json();
        
        if (methodsData.success) {
            console.log('‚úÖ M√©thodes de paiement r√©cup√©r√©es:');
            console.log(`   - Nombre de m√©thodes: ${methodsData.data.paymentMethods.length}`);
            methodsData.data.paymentMethods.forEach(method => {
                console.log(`   - ${method.typeName} (${method.type}) - ${method.isDefault ? 'Par d√©faut' : 'Secondaire'}`);
            });
        } else {
            console.log('‚ùå √âchec de la r√©cup√©ration des m√©thodes:', methodsData.message);
        }

        // Test 3: Ajouter une m√©thode Airtel Money
        console.log('\n3Ô∏è‚É£ Test d\'ajout d\'une m√©thode Airtel Money...');
        const addAirtelResponse = await fetch(`${BASE_URL}/parametres/payment-methods`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                type: 'airtel_money',
                parameters: {
                    phoneNumber: '+237612345678'
                },
                isDefault: false
            })
        });
        const addAirtelData = await addAirtelResponse.json();
        
        if (addAirtelData.success) {
            console.log('‚úÖ M√©thode Airtel Money ajout√©e avec succ√®s');
        } else {
            console.log('‚ùå √âchec de l\'ajout d\'Airtel Money:', addAirtelData.message);
            if (addAirtelData.errors) {
                console.log('   Erreurs:', addAirtelData.errors.join(', '));
            }
        }

        // Test 4: Ajouter une m√©thode Visa
        console.log('\n4Ô∏è‚É£ Test d\'ajout d\'une m√©thode Visa...');
        const addVisaResponse = await fetch(`${BASE_URL}/parametres/payment-methods`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                type: 'visa',
                parameters: {
                    cardNumber: '4242 4242 4242 4242',
                    expiryDate: '12/25',
                    cvv: '123',
                    cardholderName: 'Jean Dupont'
                },
                isDefault: true
            })
        });
        const addVisaData = await addVisaResponse.json();
        
        if (addVisaData.success) {
            console.log('‚úÖ M√©thode Visa ajout√©e avec succ√®s');
        } else {
            console.log('‚ùå √âchec de l\'ajout de Visa:', addVisaData.message);
            if (addVisaData.errors) {
                console.log('   Erreurs:', addVisaData.errors.join(', '));
            }
        }

        // Test 5: Ajouter une m√©thode Mobicash
        console.log('\n5Ô∏è‚É£ Test d\'ajout d\'une m√©thode Mobicash...');
        const addMobicashResponse = await fetch(`${BASE_URL}/parametres/payment-methods`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                type: 'mobicash',
                parameters: {
                    phoneNumber: '+237698765432'
                },
                isDefault: false
            })
        });
        const addMobicashData = await addMobicashResponse.json();
        
        if (addMobicashData.success) {
            console.log('‚úÖ M√©thode Mobicash ajout√©e avec succ√®s');
        } else {
            console.log('‚ùå √âchec de l\'ajout de Mobicash:', addMobicashData.message);
            if (addMobicashData.errors) {
                console.log('   Erreurs:', addMobicashData.errors.join(', '));
            }
        }

        // Test 6: Test avec des param√®tres invalides
        console.log('\n6Ô∏è‚É£ Test avec des param√®tres invalides...');
        const invalidResponse = await fetch(`${BASE_URL}/parametres/payment-methods`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                type: 'visa',
                parameters: {
                    cardNumber: '1234', // Num√©ro invalide
                    expiryDate: '13/25', // Date invalide
                    cvv: '12', // CVV trop court
                    cardholderName: 'A' // Nom trop court
                },
                isDefault: false
            })
        });
        const invalidData = await invalidResponse.json();
        
        if (!invalidData.success) {
            console.log('‚úÖ Validation correcte - param√®tres invalides rejet√©s:', invalidData.message);
            if (invalidData.errors) {
                console.log('   Erreurs d√©taill√©es:', invalidData.errors.join(', '));
            }
        } else {
            console.log('‚ùå Probl√®me de validation - param√®tres invalides accept√©s');
        }

        // Test 7: Test avec un type inexistant
        console.log('\n7Ô∏è‚É£ Test avec un type de m√©thode inexistant...');
        const invalidTypeResponse = await fetch(`${BASE_URL}/parametres/payment-methods`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                type: 'type_inexistant',
                parameters: {
                    test: 'valeur'
                },
                isDefault: false
            })
        });
        const invalidTypeData = await invalidTypeResponse.json();
        
        if (!invalidTypeData.success) {
            console.log('‚úÖ Validation correcte - type inexistant rejet√©:', invalidTypeData.message);
        } else {
            console.log('‚ùå Probl√®me de validation - type inexistant accept√©');
        }

        // Test 8: V√©rification finale des m√©thodes
        console.log('\n8Ô∏è‚É£ V√©rification finale des m√©thodes de paiement...');
        const finalMethodsResponse = await fetch(`${BASE_URL}/parametres/payment-methods`);
        const finalMethodsData = await finalMethodsResponse.json();
        
        if (finalMethodsData.success) {
            console.log('‚úÖ M√©thodes finales:');
            console.log(`   - Nombre total: ${finalMethodsData.data.paymentMethods.length}`);
            finalMethodsData.data.paymentMethods.forEach(method => {
                console.log(`   - ${method.typeName} (${method.type}) - ${method.isDefault ? 'Par d√©faut' : 'Secondaire'}`);
                if (method.maskedData) {
                    console.log(`     Donn√©es masqu√©es:`, method.maskedData);
                }
            });
        } else {
            console.log('‚ùå √âchec de la v√©rification finale:', finalMethodsData.message);
        }

        console.log('\nüéâ Tests de m√©thodes de paiement termin√©s !');

    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error.message);
        console.log('\nüí° Assurez-vous que le serveur est d√©marr√© sur le port 3000');
    }
}

// Ex√©cuter les tests
if (require.main === module) {
    testPaymentMethodsRoutes();
}

module.exports = { testPaymentMethodsRoutes };
