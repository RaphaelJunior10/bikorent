#!/usr/bin/env node

/**
 * Script de test pour les routes de facturation
 * Teste les routes de gestion des plans de facturation
 */

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testBillingRoutes() {
    console.log('üß™ Test des routes de facturation...\n');

    try {
        // Test 1: R√©cup√©rer tous les plans de facturation
        console.log('1Ô∏è‚É£ Test de r√©cup√©ration des plans de facturation...');
        const plansResponse = await fetch(`${BASE_URL}/parametres/billing/plans`);
        const plansData = await plansResponse.json();
        
        if (plansData.success) {
            console.log('‚úÖ Plans de facturation r√©cup√©r√©s avec succ√®s:');
            plansData.data.plans.forEach(plan => {
                console.log(`   - ${plan.name} (${plan.id}): ${plan.pricePerProperty} ${plan.currency}/propri√©t√©/mois`);
            });
        } else {
            console.log('‚ùå √âchec de la r√©cup√©ration des plans:', plansData.message);
        }

        // Test 2: R√©cup√©rer les d√©tails de facturation de l'utilisateur
        console.log('\n2Ô∏è‚É£ Test de r√©cup√©ration des d√©tails de facturation...');
        const detailsResponse = await fetch(`${BASE_URL}/parametres/billing/details`);
        const detailsData = await detailsResponse.json();
        
        if (detailsData.success) {
            console.log('‚úÖ D√©tails de facturation r√©cup√©r√©s:');
            console.log(`   - Plan actuel: ${detailsData.data.currentPlan?.name || 'N/A'}`);
            console.log(`   - Co√ªt mensuel: ${detailsData.data.userBilling?.monthlyCost || 0} XAF`);
            console.log(`   - Nombre de propri√©t√©s: ${detailsData.data.propertiesCount || 0}`);
        } else {
            console.log('‚ùå √âchec de la r√©cup√©ration des d√©tails:', detailsData.message);
        }

        // Test 3: Changer vers le plan Standard
        console.log('\n3Ô∏è‚É£ Test de changement vers le plan Standard...');
        const changeResponse = await fetch(`${BASE_URL}/parametres/billing/change-plan`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ planId: 'standard' })
        });
        const changeData = await changeResponse.json();
        
        if (changeData.success) {
            console.log('‚úÖ Changement de plan r√©ussi:', changeData.data.plan.name);
        } else {
            console.log('‚ùå √âchec du changement de plan:', changeData.message);
        }

        // Test 4: Changer vers le plan Premium
        console.log('\n4Ô∏è‚É£ Test de changement vers le plan Premium...');
        const changePremiumResponse = await fetch(`${BASE_URL}/parametres/billing/change-plan`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ planId: 'premium' })
        });
        const changePremiumData = await changePremiumResponse.json();
        
        if (changePremiumData.success) {
            console.log('‚úÖ Changement vers Premium r√©ussi:', changePremiumData.data.plan.name);
        } else {
            console.log('‚ùå √âchec du changement vers Premium:', changePremiumData.message);
        }

        // Test 5: Revenir au plan Basique
        console.log('\n5Ô∏è‚É£ Test de retour au plan Basique...');
        const changeBasicResponse = await fetch(`${BASE_URL}/parametres/billing/change-plan`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ planId: 'basique' })
        });
        const changeBasicData = await changeBasicResponse.json();
        
        if (changeBasicData.success) {
            console.log('‚úÖ Retour au plan Basique r√©ussi:', changeBasicData.data.plan.name);
        } else {
            console.log('‚ùå √âchec du retour au plan Basique:', changeBasicData.message);
        }

        // Test 6: Test avec un plan inexistant
        console.log('\n6Ô∏è‚É£ Test avec un plan inexistant...');
        const invalidResponse = await fetch(`${BASE_URL}/parametres/billing/change-plan`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ planId: 'plan-inexistant' })
        });
        const invalidData = await invalidResponse.json();
        
        if (!invalidData.success) {
            console.log('‚úÖ Validation correcte - plan inexistant rejet√©:', invalidData.message);
        } else {
            console.log('‚ùå Probl√®me de validation - plan inexistant accept√©');
        }

        // Test 7: V√©rification finale des d√©tails
        console.log('\n7Ô∏è‚É£ V√©rification finale des d√©tails de facturation...');
        const finalDetailsResponse = await fetch(`${BASE_URL}/parametres/billing/details`);
        const finalDetailsData = await finalDetailsResponse.json();
        
        if (finalDetailsData.success) {
            console.log('‚úÖ D√©tails finaux:');
            console.log(`   - Plan actuel: ${finalDetailsData.data.currentPlan?.name || 'N/A'}`);
            console.log(`   - Co√ªt mensuel: ${finalDetailsData.data.userBilling?.monthlyCost || 0} XAF`);
            console.log(`   - Nombre de propri√©t√©s: ${finalDetailsData.data.propertiesCount || 0}`);
        } else {
            console.log('‚ùå √âchec de la v√©rification finale:', finalDetailsData.message);
        }

        console.log('\nüéâ Tests de facturation termin√©s !');

    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error.message);
        console.log('\nüí° Assurez-vous que le serveur est d√©marr√© sur le port 3000');
    }
}

// Ex√©cuter les tests
if (require.main === module) {
    testBillingRoutes();
}

module.exports = { testBillingRoutes };
