const express = require('express');
const router = express.Router();
const automationService = require('../services/automationService');
const dataService = require('../services/dataService');

// Page des automatisations
router.get('/', async (req, res) => {
    // V√©rifier l'authentification
    if (!req.session || !req.session.user) {
        return res.redirect('/auth/login');
    }

    try {
        // V√©rifier le plan de l'utilisateur
        const user = await dataService.getUserById(req.session.user.id);
        if (!user) {
            console.log('‚ùå Utilisateur non trouv√©');
            return res.redirect('/auth/login');
        }

        // V√©rifier si l'utilisateur a un plan Premium ou Entreprise
        const userPlan = user.facturation?.planId || 'basique';
        console.log(`üîç Plan utilisateur: ${userPlan}`);
        
        if (userPlan !== 'enterprise') {
            console.log('‚ùå Acc√®s refus√© - Plan insuffisant');
            return res.render('upgrade-required', {
                title: 'Acc√®s refus√© - BikoRent',
                currentPage: 'automatisations',
                pageTitle: 'Acc√®s refus√©',
                isAuthenticated: true,
                user: req.session.user,
                message: 'Seuls les membres Entreprise ont acc√®s √† cette fonctionnalit√©. Mettez √† jour votre forfait pour y acc√©der.',
                requiredPlan: 'enterprise'
            });
        }
        // R√©cup√©rer les automatisations depuis Firebase
        const allAutomations = await automationService.getAllAutomations();
        console.log('üìä Automatisations r√©cup√©r√©es:', allAutomations.length);
        
        // R√©cup√©rer les param√®tres utilisateur
        const userAutomations = await automationService.getUserAutomations(req.session.user.id);
        console.log('üë§ Param√®tres utilisateur:', JSON.stringify(userAutomations, null, 2));

        // Fusionner les donn√©es
        const automations = allAutomations.map(auto => {
            const userIsActive = userAutomations.automations?.[auto.id]?.isActive;
            console.log(`üîç ${auto.id}: isActive dans BDD = ${userIsActive}, d√©faut = ${auto.isActive}`);
            
            return {
                ...auto,
                userIsActive: userIsActive !== undefined ? userIsActive : auto.isActive,
                userSettings: userAutomations.automations?.[auto.id]?.settings || {}
            };
        });
        
        console.log('‚úÖ Automatisations fusionn√©es:', automations.map(a => ({ id: a.id, userIsActive: a.userIsActive })));

        res.render('automatisations', {
            title: 'Automatisations - BikoRent',
            currentPage: 'automatisations',
            pageTitle: 'Automatisations',
            isAuthenticated: true,
            user: req.session.user,
            automations: automations
        });

    } catch (error) {
        console.error('‚ùå Erreur chargement automatisations:', error);
        res.status(500).render('error', {
            title: 'Erreur - BikoRent',
            currentPage: 'automatisations',
            message: 'Erreur lors du chargement des automatisations',
            isAuthenticated: true,
            user: req.session.user
        });
    }
});

// API pour activer/d√©sactiver une automatisation
router.post('/api/toggle/:automationId', async (req, res) => {
    try {
        console.log('üì° API toggle appel√©e');
        
        if (!req.session || !req.session.user) {
            console.log('‚ùå Utilisateur non authentifi√©');
            return res.status(401).json({ success: false, message: 'Non autoris√©' });
        }

        // V√©rifier le plan de l'utilisateur
        const user = await dataService.getUserById(req.session.user.id);
        if (!user) {
            return res.status(401).json({ success: false, message: 'Utilisateur non trouv√©' });
        }

        const userPlan = user.billing?.plan || 'free';
        if (userPlan !== 'premium' && userPlan !== 'enterprise') {
            return res.status(403).json({ 
                success: false, 
                message: 'Seuls les membres Entreprise ont acc√®s √† cette fonctionnalit√©. Mettez √† jour votre forfait pour y acc√©der.',
                requiredPlan: 'enterprise'
            });
        }

        const { automationId } = req.params;
        const { isActive } = req.body;

        console.log(`üîÑ Toggle automatisation: ${automationId} -> ${isActive} pour user ${req.session.user.id}`);

        const result = await automationService.toggleAutomation(
            req.session.user.id,
            automationId,
            isActive
        );

        console.log('üìä R√©sultat:', result);
        res.json(result);

    } catch (error) {
        console.error('‚ùå Erreur toggle automatisation:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur lors de la mise √† jour'
        });
    }
});

// API pour mettre √† jour les param√®tres d'une automatisation
router.post('/api/settings/:automationId', async (req, res) => {
    try {
        if (!req.session || !req.session.user) {
            return res.status(401).json({ success: false, message: 'Non autoris√©' });
        }

        // V√©rifier le plan de l'utilisateur
        const user = await dataService.getUserById(req.session.user.id);
        if (!user) {
            return res.status(401).json({ success: false, message: 'Utilisateur non trouv√©' });
        }

        const userPlan = user.billing?.plan || 'free';
        if (userPlan !== 'premium' && userPlan !== 'enterprise') {
            return res.status(403).json({ 
                success: false, 
                message: 'Seuls les membres Entreprise ont acc√®s √† cette fonctionnalit√©. Mettez √† jour votre forfait pour y acc√©der.',
                requiredPlan: 'enterprise'
            });
        }

        const { automationId } = req.params;
        const { settings } = req.body;

        const result = await automationService.updateAutomationSettings(
            req.session.user.id,
            automationId,
            settings
        );

        res.json(result);

    } catch (error) {
        console.error('‚ùå Erreur mise √† jour param√®tres:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur lors de la mise √† jour des param√®tres'
        });
    }
});

// API pour ex√©cuter manuellement la v√©rification des retards de paiement
router.post('/api/check-unpaid-rent', async (req, res) => {
    try {
        if (!req.session || !req.session.user) {
            return res.status(401).json({ 
                success: false, 
                message: 'Non autoris√©' 
            });
        }

        // V√©rifier le plan de l'utilisateur
        const user = await dataService.getUserById(req.session.user.id);
        if (!user) {
            return res.status(401).json({ success: false, message: 'Utilisateur non trouv√©' });
        }

        const userPlan = user.billing?.plan || 'free';
        if (userPlan !== 'premium' && userPlan !== 'enterprise') {
            return res.status(403).json({ 
                success: false, 
                message: 'Seuls les membres Entreprise ont acc√®s √† cette fonctionnalit√©. Mettez √† jour votre forfait pour y acc√©der.',
                requiredPlan: 'enterprise'
            });
        }

        console.log('üîî Ex√©cution manuelle de la v√©rification des retards de paiement...');

        // Ex√©cuter la v√©rification
        await automationService.checkUnpaidRentNotifications();

        res.json({
            success: true,
            message: 'V√©rification des retards de paiement effectu√©e avec succ√®s'
        });

    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification des retards:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur lors de la v√©rification des retards de paiement',
            error: error.message
        });
    }
});

// API pour ex√©cuter manuellement la v√©rification des expirations de bail
router.post('/api/check-lease-expiry', async (req, res) => {
    try {
        if (!req.session || !req.session.user) {
            return res.status(401).json({ 
                success: false, 
                message: 'Non autoris√©' 
            });
        }

        // V√©rifier le plan de l'utilisateur
        const user = await dataService.getUserById(req.session.user.id);
        if (!user) {
            return res.status(401).json({ success: false, message: 'Utilisateur non trouv√©' });
        }

        const userPlan = user.billing?.plan || 'free';
        if (userPlan !== 'premium' && userPlan !== 'enterprise') {
            return res.status(403).json({ 
                success: false, 
                message: 'Seuls les membres Entreprise ont acc√®s √† cette fonctionnalit√©. Mettez √† jour votre forfait pour y acc√©der.',
                requiredPlan: 'enterprise'
            });
        }

        console.log('üìÖ Ex√©cution manuelle de la v√©rification des expirations de bail...');

        // Ex√©cuter la v√©rification
        await automationService.checkLeaseExpiryReminders();

        res.json({
            success: true,
            message: 'V√©rification des expirations de bail effectu√©e avec succ√®s'
        });

    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification des expirations:', error);
        res.status(500).json({
            success: false,
            message: 'Erreur lors de la v√©rification des expirations de bail',
            error: error.message
        });
    }
});

module.exports = router;